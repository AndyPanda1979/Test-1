#***********************************************************************************************************
# 1. На языке Python реализовать алгоритм (функцию) определения четности целого числа, который будет 
# аналогичен нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций
# def isEven(value):return value%2==0
#***********************************************************************************************************
# Python 3.9.7
import time

def isEven1(value):                     # образец
    return value % 2 == 0


def is_even2(value):
    """
    Через побитовое & сравнение с '1', по факту проверка последнего бита,
    если на выходе 0 -> четное (True)
    если на выходе !0 -> нечетное (False)
    :param value:
    :return: True(if even) or False(if odd)
    Потестировал обе на 1М значений, % работает быстрее, чем &, пока мне сложно это объяснить, надо подробнее понять,
    как реализована % на уровне битов, видимо. Я пока новичок, так далеко в дебри не залезал.
    """
    return value & 1 == 0


# для теста : 1М значений
# 
# timer1 = time.time()
# for a in range(-500000, +500000, 1):
#     isEven1(a)
# time_value_1 = time.time()-timer1
# 
# timer2 = time.time()
# for b in range(-500000, +500000, 1):
#     is_even2(b)
# time_value_2 = time.time()-timer2
# 
# print('Скорость выполнения: value % 2 == 0: ', time_value_1, '; value & 1 == 0: ', time_value_2)

#***********************************************************************************************************

#***********************************************************************************************************
# 2. На языке Python реализовать минимум 2 класса реализовывающих циклический буфер FIFO. 
# Объяснить плюсы и минусы каждой реализации.
#***********************************************************************************************************
# Python 3
# -*- coding: utf-8 -*-
#import time
#import random
#
# class stack_FIFO_1():
#     """
#     Вариант с отбросом записи новых значений, при заполнениии всех ячеек, новые значения игнорируются
#     """
# 
#     def __init__(self, size):
#         self.size = size                                # размер стека
#         self.in_p = 0                                   # указатель на ячейку стека для записи
#         self.out_p = 0                                  # указатель на ячейку стека для вывода
#         self.buffer = [None for i in range(self.size)]  # тело стека, заполняем None
#         print('Created stack with size {} elements'.format(self.size))
# 
# # приращение указателей с цикличностью
#     def increment(self, pointer):
#         if pointer < self.size - 1:
#             return pointer + 1
#         else:
#             return 0
# 
# # помещение элемента в буфер
#     def add_data(self, data):
#         if self.buffer[self.in_p] is None:
#             self.buffer[self.in_p] = data
#             print('put new item: ', data)
#             self.in_p = self.increment(self.in_p)
#         else:
#             print('stack is full, item was not added')
# 
# 
#     def extract_data(self):
#         if self.buffer[self.out_p] is not None:
#             print('get item: {}'.format(self.buffer[self.out_p]))
#             self.buffer[self.out_p] = None
#             self.out_p = self.increment(self.out_p)
#         else:
#             print("stack is empty, data can't be extracted")
# 
# 
# 
# class stack_FIFO_2():
#     """
#     Вариант с перезаписью старых значений, при заполнениии всех ячеек, самые старые значения заменяются вновь входящими
#     """
# 
#     def __init__(self, size):
#         self.size = size                                # размер стека
#         self.in_p = 0                                   # указатель на ячейку стека для записи
#         self.out_p = 0                                  # указатель на ячейку стека для вывода
#         self.buffer = [None for i in range(self.size)]  # тело стека, заполняем None
#         print('Created stack with size {} elements'.format(self.size))
# 
# # приращение указателей с цикличностью
#     def increment(self, pointer):
#         if pointer < self.size - 1:
#             return pointer + 1
#         else:
#             return 0
# 
# # помещение элемента в стек
#     def add_data(self, data):
#         if self.buffer[self.in_p] is None:          # если текущая ячейка на запись пуста
#             self.buffer[self.in_p] = data
#             print('put new item: ', data)
#             self.in_p = self.increment(self.in_p)
#         else:                                       # если текущая ячейка на запись имеет значение
#             print('buffer is full, current item ({}) rewrite previous ({})'.format(data, self.buffer[self.in_p]))
#             self.buffer[self.in_p] = data
#             self.in_p = self.increment(self.in_p)
#             self.out_p = self.increment(self.out_p)
# 
# # извлечение элемента из стека
#     def extract_data(self):
#         if self.buffer[self.out_p] is not None:
#             print('get item {}'.format(self.buffer[self.out_p]))
#             self.buffer[self.out_p] = None
#             self.out_p = self.increment(self.out_p)
#         else:
#             print("stack is empty, data can't be extracted")
# 
# 
# """
# ТЕСТИРОВАНИЕ
# """
# 
# s = stack_FIFO_2(10)               # для тестирования, указать, экземпляр какого класса создать
# print(s.buffer)
# operation_selector = [s.add_data, s.extract_data]
# 
# while True:
#     try:
#         command = random.choice(operation_selector)
#         if command == s.add_data:
#             data = random.randint(0, 100)
#             s.add_data(data)
#         else:
#             s.extract_data()
#         print(s.buffer)
#         time.sleep(0.5)
#     except KeyboardInterrupt:
#         print('finish')
#         break
#***********************************************************************************************************

#***********************************************************************************************************
# 3. На языке Python реализовать функцию, которая быстрее всего (по процессорным тикам) отсортирует данный ей 
# массив чисел. Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным). 
# Объяснить почему вы считаете, что функция соответствует заданным критериям.
#***********************************************************************************************************
# Python 3.9.7
import random
import time

def sort_array(value):
    """
    Использован алгоритм Хоара, несмотря на код Python, работает на равне с родным sort(), который, как я понимаю, реализован на C
    Изначально благодаря разбиению на блоки и уменьшая размер исходного массива, удается сократить кол-во итераций.
    Но, признаюсь честно, мне сложно это выразить в математической форме, я на текущий момент знаю, какая скорость может
    буть достигнута при применении этого алгоритма, и понимаю, как он работает и где может выигрывать у сортировки вставками,
    но почему сложность равна в среднем N* именно на log2N, я пока в голове не уложил у себя :)
    """
    if len(value) > 1:
        separator = value[random.randint(0, len(value)-1)]
        low_v = [i for i in value if i < separator]
        eq_v = [i for i in value if i == separator]
        hi_v = [i for i in value if i > separator]
        value = sort_array(low_v) + eq_v + sort_array(hi_v)
    return value


# Для теста, на вход массив из 1М случайных в диапазоне (0~1М) элементов.
# Сравниваю со встроенным list.sort() по времени выполнения

# a = []
# for k in range(0, 1000000):
#     a.append(random.randint(1, 1000000))
# b = a[:]
# 
# timer1 = time.time()
# a.sort()
# timer2 = time.time()
# b = sort_array(b)
# 
# print('сортировка .sort(): ', time.time()-timer1, '; сортировка Хоара : ', time.time()-timer2)
#***********************************************************************************************************
